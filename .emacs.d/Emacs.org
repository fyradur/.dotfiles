#+title: Emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Package config

** Bootstrap straight
#+begin_src emacs-lisp
;init2
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

#+RESULTS:
: t


** Use-package integration

#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

#+RESULTS:
: t


** Use straight in use-package per default
#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
(setq use-package-always-ensure t)
#+end_src

#+RESULTS:
: t



* Keybindings
Är inte sure varför jag har en seperate för emacs style.
** install general

#+begin_src emacs-lisp
;(use-package general)
(straight-use-package
  '(general :type git :host github :repo "noctuid/general.el" :commit "a0af9fe"))

#+end_src

#+RESULTS:

** Leader key
#+begin_src emacs-lisp
 (general-create-definer apollo/leader-keys
     :states  '(normal visual)
     :keymaps  '(override ess-mode-map) 
     :prefix "SPC"
     :global-prefix "C-SPC"
     )
#+end_src

#+RESULTS:
: apollo/leader-keys

** Local leader key
#+begin_src emacs-lisp
   (general-create-definer apollo/local-leader-keys
     :states  '(normal visual)
     :prefix ","
     :global-prefix "C-,")
#+end_src

#+RESULTS:
: apollo/local-leader-keys

** Some misc keybindings
#+begin_src emacs-lisp
   (apollo/leader-keys
     "" nil ;in order to unbind default binding

     "x" '(eval-last-sexp :which-key "eval sexp")

     "q" '(:ignore t :which-key "quit emacs")
     "qq" '(save-buffers-kill-emacs :which-key "Save buffers and kill emacs")

     "i" '(:ignore t :which-key "insert")

     "t" '(:ignore t :which-key "Toggle/todos")
     "tt" '((lambda () (interactive) (find-file "/home/john/.emacs.d/org-agenda/agenda.org")) :which-key "goto org agenda")
     "tc" '(global-company-mode :which-key "Toggle global company"))
   #+end_src

   #+RESULTS:
   
   

** window registers keybinding
#+begin_src emacs-lisp
(apollo/leader-keys
     "l r" '(window-configuration-to-register :which-key "Layout to register")
     "l l" '((lambda () (interactive) (window-configuration-to-register 48) (message "Layout saved to 0")) :which-key "Set window layout 0")
     "l L" '((lambda () (interactive) (jump-to-register 48)) :which-key "Goto layout 0")
     "l 1" '((lambda () (interactive) (jump-to-register 49)) :which-key "Goto layout 1")
     "l 2" '((lambda () (interactive) (jump-to-register 50)) :which-key "Goto layout 2")
     "l 3" '((lambda () (interactive) (jump-to-register 51)) :which-key "Goto layout 3")
     "l 4" '((lambda () (interactive) (jump-to-register 52)) :which-key "Goto layout 4")
     "l 5" '((lambda () (interactive) (jump-to-register 53)) :which-key "Goto layout 5")
     "l 6" '((lambda () (interactive) (jump-to-register 54)) :which-key "Goto layout 6")
     "l 7" '((lambda () (interactive) (jump-to-register 55)) :which-key "Goto layout 7")
     "l 8" '((lambda () (interactive) (jump-to-register 56)) :which-key "Goto layout 8")
     "l 9" '((lambda () (interactive) (jump-to-register 57)) :which-key "Goto layout 9")
     "l 0" '((lambda () (interactive) (jump-to-register 48)) :which-key "Goto layout 0"))
#+end_src

#+RESULTS:


** eww keybindings
#+begin_src emacs-lisp
(apollo/leader-keys
     "e" '(:ignore t :which-key "eww browser")
     "es" '(eww-search-words :which-key "Eww, search selected text")
     "eo" '(eww :which-key "Eww, enter URL or search words")
     "ey" '(eww-copy-page-url :which-key "Yank page url")
     "eo" '(eww :which-key "Eww, enter URL or search words")
     )
#+end_src

#+RESULTS:

** buffer keybindings
#+begin_src emacs-lisp
(apollo/leader-keys
     "b" '(:ignore t :which-key "buffer")
     "br" '(revert-buffer :which-key "revert (reload) buffer")

     "bk" '(kill-buffer :which-key "kill buffer")
     "bp" '(previous-buffer :which-key "previous buffer")
     "bn" '(next-buffer :which-key "next buffer")
  )
#+end_src

#+RESULTS:

** (o) open keybindings
#+begin_src emacs-lisp
(apollo/leader-keys
     "o"  '(:ignore t :which-key "Open/start/org")
     "om" '(man :which-key "Search for man entry")
     "ox" '((lambda () (interactive)(switch-to-buffer "*scratch*")) :which-key "Open scratch")
     "os" '(shell :which-key "Open shell")
  )
#+end_src

#+RESULTS:

** (f) file keybindings

#+begin_src emacs-lisp
(apollo/leader-keys
     "f"  '(:ignore t :which-key "file")
     "fs" '(save-buffer :which-key "save file")
     "fn" '(dired-create-empty-file :which-key "create new file in dired")
  )
#+end_src

#+RESULTS:

** layout keybinding
#+begin_src emacs-lisp
(apollo/leader-keys
     "l"  '(:ignore t :which-key "layouts")
     "l x" '((lambda () (interactive) (switch-to-buffer "*scratch*") (delete-other-windows)) :which-key "Goto fullscreen scratch layout")
     "l e" '((lambda () (interactive)  (find-file "~/.emacs.d/Emacs.org") (delete-other-windows)) :which-key "Goto fullscreen emacs config layout")
     "l c" '((lambda () (interactive)  (shell) (delete-other-windows)) :which-key "Goto fullscreen shell")
  )
#+end_src

#+RESULTS:

** dired keybindings
#+begin_src emacs-lisp
(apollo/leader-keys
     "d" '((lambda () (interactive) (dired (replace-regexp-in-string "/[-_a-zA-Z 0-9\.]*$" "" (buffer-file-name) t))) :which-key "dired directly")
     "D" '(dired :which-key "dired select directory")
  )
#+end_src

#+RESULTS:

** killring keybindings
#+begin_src emacs-lisp
(apollo/leader-keys
     "k"  '(:ignore t :which-key "killring")
     "ks" '(helm-show-kill-ring :which-key "show history")
  )
#+end_src

#+RESULTS:

** bookmark keybindings
#+begin_src emacs-lisp
(apollo/leader-keys
     "B" '(:ignore t :which-key "Bookmark")
     "Bd" '(bookmark-delete :which-key "Bookmark delete")
     "RET" '(counsel-bookmark  :which-key "Bookmark")
  )
#+end_src

#+RESULTS:


** Emacs style keybindings
   
#+begin_src emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

  #+RESULTS:
  : keyboard-escape-quit
   
  

* Dired (file browser)
  #+begin_src emacs-lisp
  
  (setq dired-dwim-target t)
  
  #+end_src

  
* Ivy, Swiper and Counsel
  
*** Ivy
(I don't know why the last keybinding is global-set-key instead of general-define-key)
   #+begin_src emacs-lisp
   (use-package ivy)
   (general-define-key
    :keymaps '(ivy-minibuffer-map)
    "TAB" 'ivy-alt-done	
    "C-l" 'ivy-alt-done
    "C-j" 'ivy-next-line
    "C-k" 'ivy-previous-line)

   (general-define-key
    :keymaps '(ivy-switch-buffer-map)
    "C-k" 'ivy-previous-line
    "C-l" 'ivy-done
    "C-d" 'ivy-switch-buffer-kill)


    (general-define-key
    :keymaps '(ivy-reverse-i-search-map)
    "C-k" 'ivy-previous-line
    "C-d" 'ivy-reverse-i-search-kill)
   (ivy-mode 1)

    (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)
   #+end_src

   #+RESULTS:
   : counsel-switch-buffer


*** Swiper
   
   #+begin_src emacs-lisp
   (use-package swiper)
   (general-define-key "C-s" 'swiper)
   #+end_src

   #+RESULTS:
   : swiper
   

*** Ivy rich

Don't know what this does.
   #+begin_src emacs-lisp

   (use-package ivy-rich)
   (ivy-rich-mode 1)

   #+end_src

   #+RESULTS:
   
   
*** counsel keybindings
#+begin_src emacs-lisp
(apollo/leader-keys
  "SPC" '(counsel-M-x  :which-key "M-x counsel")
     "C-SPC" '(counsel-M-x  :which-key "M-x counsel")
  
     "h"  '(:ignore t :which-key "help")
     "hk" '(helpful-key :which-key "describe key")
     "hv" '(counsel-describe-variable :which-key "describe variable")
     "hf" '(counsel-describe-function :which-key "describe function")
     "bb" '(counsel-switch-buffer :which-key "switch buffer")

     "ff" '(counsel-find-file :which-key "find file"))
#+end_src


*** Ivy-avy
#+begin_src emacs-lisp
(use-package ivy-avy)
#+end_src

#+RESULTS:


* UI / UX

** Basic UI
  #+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1) ; Disable the toolbar
  (tooltip-mode -1) ; Disable tooltips
  (set-fringe-mode 10) ; Give some breathing room
  (menu-bar-mode -1) ; Disable the menu bar
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (setq visible-bell t) ; Visual hint when at beggining of line

  (set-face-attribute 'default nil :font "Fira Code Retina" :height 120)
#+end_src

#+RESULTS:


** Syntax and other UI

*** Rainbow-delimiters

   #+begin_src emacs-lisp
   
   (use-package rainbow-delimiters)

   #+end_src

   #+RESULTS:

   
   
** Doom theme

  #+begin_src emacs-lisp

	    (use-package nerd-icons)

	    (use-package doom-modeline)

	(doom-modeline-mode 1)
	(setq doom-modeline-height 25)
        (use-package doom-themes)
	(load-theme 'doom-city-lights t)

  #+end_src

  #+RESULTS:
  : t

  
** Smooth-scrolling
  
  #+begin_src emacs-lisp

    (use-package smooth-scrolling)
    (setq scroll-margin 2)
    (setq smooth-scroll-margin 4)
    (smooth-scrolling-mode)

  #+end_src
  

* Change UI

** Hydra

  #+begin_src emacs-lisp
  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (defhydra apollo/normalj (:timeout 0.3)
    "enter normal mode with quick jj"
    ("j" (lambda () (interactive) (evil-delete-backward-char-and-join 1) (evil-force-normal-state))))

  (apollo/leader-keys
    "z" '(hydra-text-scale/body :which-key "zoom text"))
  #+end_src

  
** Darkroom (change margins)
#+begin_src emacs-lisp
(use-package darkroom)
(setq darkroom-text-scale-increase 0)
(setq darkroom-margins 0.20)
(setq darkroom-margin-increment 0.15)
(add-hook 'text-mode-hook (lambda () (interactive) (darkroom-tentative-mode t)))

(defhydra hydra-margin-scale (:timeout 4)
"scale margins"
("j" darkroom-increase-margins "increase")
("k" darkroom-decrease-margins "decrease")
("f" nil "finished" :exit t))

(apollo/leader-keys
"wm" '(hydra-margin-scale/body :which-key "change margins"))
#+end_src

#+RESULTS:
| (lambda nil (interactive) (darkroom-tentative-mode t)) | darkroom-tentative-mode |



* Evil stuff
  
** Evil-mode

Många settings här i don't understand.
   #+begin_src emacs-lisp
   (setq evil-want-integration t)
   (setq evil-want-keybinding nil)
   (setq evil-want-C-u-scroll t)
   (setq evil-want-C-i-jump nil)

   ;(use-package evil)
   (straight-use-package
  '(evil :type git :host github :repo "emacs-evil/evil" :commit "a0af9fe"))


   (evil-mode 1)
   (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
   (evil-global-set-key 'motion "j" 'evil-next-visual-line)
   (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
   (evil-set-initial-state 'messages-buffer-mode 'normal)
   (evil-set-initial-state 'dashboard-mode 'normal)
   #+end_src

   #+RESULTS:
   : t
   
   
** Evil-collection

#+begin_src emacs-lisp
(use-package evil-collection)
(evil-collection-init)
#+end_src

#+RESULTS:
: t
   
   
** Evil surround

  #+begin_src emacs-lisp
  (use-package evil-surround)
  (global-evil-surround-mode 1)
  #+end_src
  
  
** Evil textobj anyblock

#+begin_src emacs-lisp
(use-package evil-textobj-anyblock)
(define-key evil-inner-text-objects-map "b" 'evil-textobj-anyblock-inner-block)
(define-key evil-outer-text-objects-map "b" 'evil-textobj-anyblock-a-block)
#+end_src

#+RESULTS:
: evil-textobj-anyblock-a-block


** evil keybindings
#+begin_src emacs-lisp
(apollo/leader-keys

     "w"  '(:ignore t :which-key "evil window")
     "ws" '(evil-window-split :which-key "window split horizontal")
     "wv" '(evil-window-vsplit :which-key "window split vertical")

     "wh" '(evil-window-left :which-key "go to left window")
     "wj" '(evil-window-down :which-key "go to window below")
     "wk" '(evil-window-up :which-key "go to window up")
     "wl" '(evil-window-right :which-key "go to right window")
     "wn" '(evil-window-next :which-key "go to next window")
     "ww" '(evil-window-next :which-key "go to next window")
     "wp" '(evil-window-prev :which-key "go to previous window")

     "wH" '(evil-window-decrease-width :which-key "decrease window width")
     "wJ" '(evil-window-decrease-height :which-key "decrease window height")
     "wK" '(evil-window-increase-height :which-key "increase window height")
     "wL" '(evil-window-increase-width :which-key "increase window width")

     "wd" '(evil-window-delete :which-key "delete window")
     "wf" '(delete-other-windows :which-key "maximize focused windows"))
#+end_src

  
* Org mode

** Org mode
#+begin_src emacs-lisp
(use-package org)
#+end_src


** Org keybindings starting with ,
#+begin_src emacs-lisp
  (apollo/local-leader-keys org-mode-map
            "o" '(:ignore t :which-key "Org open")

            "l" '(org-latex-export-to-pdf :which-key "Export to latex pdf")


            "T" '(:ignore t :which-key "Toggle")
            "Ti" '(org-toggle-inline-images :which-key "Toggle display of images")
            "Tl" '(org-toggle-link-display :which-key "Toggle display of links")

            "t" '(org-todo :which-key "Org todo toggle cycle")

            "s" '(org-narrow-to-subtree :which-key "Narrow to subtree")

            "w" '(widen :which-key "Widen")


            "." '(counsel-org-goto :which-key "Org goto (local file)."))
#+end_src


** Org keybidnings not starting with , normal mode
#+begin_src emacs-lisp
(general-define-key
   :states '(normal visual)
   :keymaps 'org-mode-map
   "C-k"
   '(lambda () (interactive) (org-previous-visible-heading 1))
   "C-j"
   '(lambda () (interactive) (org-next-visible-heading 1))
   "RET"
   '(org-ctrl-c-ctrl-c
     :which-key "Org ctrl c ctrl c"))
#+end_src


** Org-bullets

#+begin_src emacs-lisp
(use-package org-bullets)
(setq org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
   

** Code block completion
   
   #+begin_src emacs-lisp

      (require 'org-tempo)

      (add-to-list 'org-structure-template-alist '("sh" . "src shell"))

      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("elnt" . "src emacs-lisp :tangle no"))

      (add-to-list 'org-structure-template-alist '("els" . "src emacs-lisp :session"))
      (add-to-list 'org-structure-template-alist '("elsnt" . "src emacs-lisp :session 
   :tangle no"))

      (add-to-list 'org-structure-template-alist '("pys" . "src python :results output :session"))
      (add-to-list 'org-structure-template-alist '("pysnt" . "src python :results output :session :tangle no"))

      (add-to-list 'org-structure-template-alist '("py" . "src python :results output"))
      (add-to-list 'org-structure-template-alist '("pynt" . "src python :results output :tangle no"))

      (add-to-list 'org-structure-template-alist '("rs" . "src R :results output :session"))
      (add-to-list 'org-structure-template-alist '("rsnt" . "src R :results output :session :tangle no"))

      (add-to-list 'org-structure-template-alist '("r" . "src R :results output"))
      (add-to-list 'org-structure-template-alist '("rnt" . "src R :results output :tangle no"))

      (add-to-list 'org-structure-template-alist '("fs" . "src fsharp"))
      (add-to-list 'org-structure-template-alist '("fsnt" . "src fsharp :tangle no"))

      (add-to-list 'org-structure-template-alist '("fss" . "src fsharp :session"))
      (add-to-list 'org-structure-template-alist '("fssnt" . "src fsharp :session :tangle no"))


      (add-to-list 'org-structure-template-alist '("hs" . "src haskell :results output"))
      (add-to-list 'org-structure-template-alist '("hsnt" . "src haskell :results output  :tangle no"))

      (add-to-list 'org-structure-template-alist '("hss" . "src haskell :results output :session"))
      (add-to-list 'org-structure-template-alist '("hssnt" . "src haskell :results output :session :tangle no"))

      (add-to-list 'org-structure-template-alist '("jss" . "src js :results output"))
      (add-to-list 'org-structure-template-alist '("jssnt" . "src js :results output  :tangle no"))

      (add-to-list 'org-structure-template-alist '("jsss" . "src js :results output :session"))
      (add-to-list 'org-structure-template-alist '("jsssnt" . "src js :results output :session :tangle no"))


      (add-to-list 'org-structure-template-alist '("gm" . "src sage :session"))


       (setq org-src-preserve-indentation nil 
           org-edit-src-content-indentation 0)
       (setq org-confirm-babel-evaluate nil)

   #+end_src

   #+RESULTS:



** Babel

   #+begin_src emacs-lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (C . t)
      (R . t)
      (lilypond t)

        ))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

    (setq org-src-window-setup 'current-window)
   #+end_src

   #+RESULTS:
   : current-window
   

* Org roam

** Org roam
#+begin_src emacs-lisp
(setq org-roam-directory (file-truename "/home/john/.emacs.d/org-roam/"))
(setq org-roam-v2-ack t)
(setq org-roam-complete-everywhere t)
(use-package org-roam)
(org-roam-db-autosync-mode)
(require 'org-roam-protocol)
#+end_src

#+RESULTS:
: completion-at-point

** Org roam ui
#+begin_src emacs-lisp
(use-package org-roam-ui)
#+end_src

** org roam keybindings
#+begin_src emacs-lisp
(apollo/leader-keys
     "n" '(:ignore t :which-key "org roam (n för node idk)")
     "nl" '(org-roam-buffer-toggle :which-key "toggle nodes with mention")
     "nf" '(org-roam-node-find :which-key "find node")
     "nF" '(consult-org-roam-search :which-key "search node")
     "ni" '(org-roam-node-insert :which-key "insert node")
     "nt" '(org-roam-dailies-goto-today :which-key "goto org roam dailies today")
     "np" '(org-roam-dailies-goto-previous-note :which-key "goto previous day")
     "nn" '(org-roam-dailies-goto-previous-note :which-key "goto previous day")

     "nd" '(:ignore t :which-key "org roam dailies")
     "ndp" '(org-roam-dailies-goto-previous-note :which-key "goto previous day")
     "ndn" '(org-roam-dailies-goto-next-note :which-key "goto next day")
     "ndt" '(org-roam-dailies-goto-today :which-key "goto today")
     "ndd" '(org-roam-dailies-goto-date :which-key "goto date")
     "ndT" '(org-roam-dailies-capture-today :which-key "capture today")

     "l f" '((lambda () (interactive)  (org-roam-node-find) (delete-other-windows)) :which-key "Goto fullscreen find roam node")
     "l d" '((lambda () (interactive)  (org-roam-dailies-goto-today) (delete-other-windows)) :which-key "Goto fullscreen roam dailies today.")
 )
#+end_src


* Scratch buffer
#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
(setq initial-scratch-message "")
#+end_src

#+RESULTS:


* Xenops

** Xenops
#+begin_src emacs-lisp
(use-package auctex)
;(straight-use-package '(xenops :type git :host github :repo "dandavison/xenops" :commit "4d75c1c"))
(straight-use-package '(xenops :type git :host github :repo "dandavison/xenops"))


;(add-hook 'org-mode-hook (lambda () (xenops-mode 1)))
;(with-eval-after-load 'org
;  (add-hook 'org-mode-hook (lambda () (xenops-mode 1))))
;(add-hook 'org-mode-hook
;          (lambda ()
;            (ignore-errors (xenops-mode 1))))
#+end_src

#+RESULTS:


** Image size
#+begin_src emacs-lisp
(setq xenops-math-image-scale-factor 2.2)
#+end_src

** Keybinding
#+begin_src emacs-lisp :tangle no
(apollo/local-leader-keys org-mode-map
"," '(xenops-render :which-key "Toggle preview latex fragments"))

#+end_src


* Yasnippet

  #+begin_src emacs-lisp
  (use-package yasnippet)                  ; Snippets
  (setq yas/triggers-in-field t)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
  (yas-reload-all)
  (yas-global-mode)

  (setq-default yas-snippet-dirs '("~/.emacs.d/snippets"))
  #+end_src

  
** Yas snippet keybindings
#+begin_src emacs-lisp
(apollo/leader-keys
     "y"  '(:ignore t :which-key "yasnippet")
     "yv" '(yas-visit-snippet-file :which-key "visit snippet")
     "yn" '(yas-new-snippet :which-key "new snippet")

     "is" '((lambda () (interactive) (evil-insert 1) (yas-insert-snippet)) :which-key "yas-snippet"))
#+end_src


** Org math
A variable to use in snippets. Usually for autoexpansion in org documents.
#+begin_src emacs-lisp
(defvar orgmath t)


(defun orgmathp () (interactive) orgmath)


(defun orgmath-toggle () (interactive)

       (if (orgmathp) (setq orgmath nil) (setq orgmath t)))
#+end_src



** Try expanding snippets yas

#+begin_src emacs-lisp

(defun apollo/yas-try-expanding-auto-snippets ()
   (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))

  (add-hook 'post-self-insert-hook #'apollo/yas-try-expanding-auto-snippets)

#+end_src

Sen om du vill att en snippet ska autoexpanda med texenv så lägger du till:
# condition: (and (texmathp) 'auto)

'auto är för expanding snippet och texmathp är för tex environment.


* laas

** Latex auto activating snippet (laas mode)

#+begin_src emacs-lisp
(straight-use-package '(laas :type git :host github :repo "tecosaur/LaTeX-auto-activating-snippets"))
(defun laas-mathp () (texmathp)
(aas-set-snippets 'laas-mode
                    ;; set condition!
                    :cond #'texmathp ; expand only while in math
                    "supp" "\\supp"
                    "On" "O(n)"
                    "O1" "O(1)"
                    "Olog" "O(\\log n)"
                    "Olon" "O(n \\log n)"
                    "AA" "\\forall "
                    "EE" "\\exists "
                    "inn" "\\in "
                    "<->" "\\leftrightarrow "
                    "%%" "\\% "
                    ";;>" "\\Longrightarrow "
                    ;; bind to functions!
                    ;;"frac" (lambda () (interactive)
                    ;;        (yas-expand-snippet "\\frac{$1}{$2}$0"))
                    "td" (lambda () (interactive)
                            (yas-expand-snippet " ^{$1} $0" ))
                    "__" (lambda () (interactive)
                            (yas-expand-snippet " _{$1} $0"))
                    "Span" (lambda () (interactive)
                             (yas-expand-snippet "\\Span($1)$0"))
                    "oo" "\\\circ"
		      "sr" "^2 "
		      "hH" " \\textbackslash "
		      "+" (lambda () (interactive) (if (string-equal
							" "
							(buffer-substring (- (point) 1) (point)))
						       (insert "+ ")
						     (insert " + ")))
		      "-" (lambda () (interactive) (if (string-equal
							" "
							(buffer-substring (- (point) 1) (point)))
						       (insert "- ")
						     (insert " - ")))
		      "=" (lambda () (interactive) (if (string-equal
							" "
							(buffer-substring (- (point) 1) (point)))
						       (insert "= ")
						     (insert " = ")))
		      ";=" (lambda () (interactive) (if (string-equal
							" "
							(buffer-substring (- (point) 1) (point)))
						       (insert "\\approx ")
						     (insert " \\approx ")))
		      ";;=" (lambda () (interactive) (if (string-equal
							" "
							(buffer-substring (- (point) 1) (point)))
						       (insert "\\simeq  ")
						     (insert " \\simeq  ")))
		      "|" (lambda () (interactive) (if (string-equal
							" "
							(buffer-substring (- (point) 1) (point)))
						       (insert "| ")
						     (insert " | ")))
		    ))
(add-hook 'org-mode-hook (lambda () (laas-mode 1)))
#+end_src


* Gemini
** Require json
#+begin_src emacs-lisp
(require 'json)
#+end_src
** Api key
#+begin_src emacs-lisp
(defvar gemini-api-key (with-temp-buffer
                         (insert-file-contents "/home/john/.privatedotfiles/gemini")
                         (thing-at-point 'line t))
  "API key for accessing the Gemini API.")
#+end_src
** Display 
#+begin_src emacs-lisp
(defun display (message)
  "Append the MESSAGE to the *Gemini API Response* buffer."
  (with-current-buffer (get-buffer-create "*Gemini API Response*")
    (goto-char (point-max))
    (insert message)
    (markdown-mode) 
    (display-buffer (current-buffer))))
#+end_src

** Get api response

#+begin_src emacs-lisp
(defun get-api-response (question)
  "Send a QUESTION to the Gemini API and return the raw JSON response as a string."
  (let* ((url (format "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=%s"
                      gemini-api-key))
         (json-data `(:contents [(:parts [(:text ,question)])]))
         (data (json-encode json-data))
         (url-request-method "POST")
         (url-request-extra-headers '(("Content-Type" . "application/json")))
         (url-request-data (encode-coding-string data 'utf-8))
         response)
    (url-retrieve
     url
     (lambda (_status)
       (goto-char (point-min))
       (re-search-forward "\n\n" nil t)
       (setq response (buffer-substring-no-properties (point) (point-max)))
       (kill-buffer (current-buffer))) ;; Clean up the buffer after the response is retrieved
    nil t)
    ;; Return the response after waiting for it to complete (blocking until done)
    (while (not response)
      (sit-for 0.1)) ;; Wait for response to be set
    response))
#+end_src

** decode message
#+begin_src emacs-lisp
(defun decode-message (api-response)
  "Extract the message from the raw API RESPONSE."
  (let* ((parsed (ignore-errors (json-read-from-string api-response)))
         (candidates (cdr (assoc 'candidates parsed)))
         (first-candidate (and candidates (elt candidates 0)))
         (content (cdr (assoc 'content first-candidate)))
         (parts (cdr (assoc 'parts content)))
         (first-part (and parts (elt parts 0)))
         (message (cdr (assoc 'text first-part))))
    (or message "Error: Could not extract response.")))
#+end_src

** Display response

#+begin_src emacs-lisp
(defun gemini-display-response (question)
  "Send a QUESTION to the Gemini API, extract the message, and display it in the buffer.
If there is a visual selection, append it to the question."
  (interactive "sEnter your question: ")
  (let* ((visual-selection (if (use-region-p) (buffer-substring (region-beginning) (region-end)) ""))
         (full-question (if (string-empty-p visual-selection)
                            question
                          (concat visual-selection "\n" question)))
         (api-response (get-api-response full-question))
         (message))
    (setq message (decode-message api-response))
    (display message)))
#+end_src

** Display message 2
#+begin_src emacs-lisp
(defun gemini-display-response (question)
  "Send a QUESTION to the Gemini API, extract the message, and display it in the buffer.
If there is a visual selection, append it to the question, and always append '[answer in less than 1000 words]'."
  (interactive "sEnter your question: ")
  (let* ((visual-selection (if (use-region-p) (buffer-substring (region-beginning) (region-end)) ""))
         (base-question (if (string-empty-p visual-selection)
                            question
                          (concat visual-selection "\n" question)))
         (full-question (concat base-question " [answer in less than 1000 words]"))
         (api-response (get-api-response full-question))
         (message))
    (setq message (decode-message api-response))
    (display message)))
#+end_src

#+RESULTS:
: gemini-display-response

** keybinding
#+begin_src emacs-lisp
(apollo/leader-keys
"a" '(gemini-display-response :which-key "change margins"))
#+end_src

#+RESULTS:



* Magit

  #+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)

    )
(apollo/leader-keys
"gs" '(magit-status :which-key "change margins"))

       #+end_src

  #+RESULTS:
  : apollo/org-mode-setup


* ESS
#+begin_src emacs-lisp
(use-package ess
  :straight t)

(apollo/leader-keys
"or" '(run-ess-r :which-key "Run R repl"))

#+end_src

* Apollo functions

** Apollo org toggle headlines
#+begin_src emacs-lisp
(defun apollo/org-toggle-headline ()
  (interactive)
  (save-excursion
    (if (re-search-forward " :ignore:" (line-end-position) 't)
	(replace-match "")
      (goto-char (line-end-position))
      (insert " :ignore:"))))

(apollo/local-leader-keys org-mode-map
            "e" '(apollo/org-toggle-headline :which-key "Toggle export headline."))
#+end_src

